import React from 'react';
import {
  Card,
  CardBody,
  CardHeader,
  Typography,
  Button,
  Tabs,
  TabsHeader,
  TabsBody,
  Tab,
  TabPanel,
} from "@material-tailwind/react";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFileInvoice, faChartBar, faPlus, faSearch } from '@fortawesome/free-solid-svg-icons';

export default function PaginaInicio() {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">Sistema de Facturación</h1>
      <Tabs value="inicio">
        <TabsHeader>
          <Tab value="inicio">Inicio</Tab>
          <Tab value="facturas">Facturas</Tab>
          <Tab value="reportes">Reportes</Tab>
        </TabsHeader>
        <TabsBody>
          <TabPanel value="inicio" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader
                  floated={false}
                  shadow={false}
                  color="transparent"
                  className="flex flex-row items-center justify-between space-y-0 pb-2"
                >
                  <Typography variant="small" color="blue-gray" className="font-medium">
                    Facturas Emitidas
                  </Typography>
                  <FontAwesomeIcon icon={faFileInvoice} className="h-4 w-4 text-blue-gray-500" />
                </CardHeader>
                <CardBody className="pt-0">
                  <Typography variant="h4" color="blue-gray" className="font-bold">
                    254
                  </Typography>
                  <Typography variant="small" color="gray" className="text-xs">
                    +20% desde el mes pasado
                  </Typography>
                </CardBody>
              </Card>
              <Card>
                <CardHeader
                  floated={false}
                  shadow={false}
                  color="transparent"
                  className="flex flex-row items-center justify-between space-y-0 pb-2"
                >
                  <Typography variant="small" color="blue-gray" className="font-medium">
                    Ingresos Totales
                  </Typography>
                  <FontAwesomeIcon icon={faChartBar} className="h-4 w-4 text-blue-gray-500" />
                </CardHeader>
                <CardBody className="pt-0">
                  <Typography variant="h4" color="blue-gray" className="font-bold">
                    $1,234,567.89 MXN
                  </Typography>
                  <Typography variant="small" color="gray" className="text-xs">
                    +15% desde el mes pasado
                  </Typography>
                </CardBody>
              </Card>
            </div>
            <Card>
              <CardHeader
                floated={false}
                shadow={false}
                color="transparent"
                className="pb-2"
              >
                <Typography variant="h5" color="blue-gray">
                  Acciones Rápidas
                </Typography>
              </CardHeader>
              <CardBody className="flex gap-4">
                <Button className="flex items-center gap-2 flex-1">
                  <FontAwesomeIcon icon={faPlus} className="h-4 w-4" />
                  Nueva Factura
                </Button>
                <Button variant="outlined" className="flex items-center gap-2 flex-1">
                  <FontAwesomeIcon icon={faSearch} className="h-4 w-4" />
                  Buscar Factura
                </Button>
              </CardBody>
            </Card>
          </TabPanel>
        </TabsBody>
      </Tabs>
    </div>
  );
}





 // const fetchData = async () => {
    //     try {
    //         const resp = await fetch('https://fakestoreapi.com/products');
    //         const data = await resp.json();
            
    //         // Verificar que los datos existan antes de guardarlos
    //         if (data) {
    //             await saveData(data); 
    //         } else {
    //             console.error('No se encontraron datos');
    //         }
    //     } catch (error) {
    //         console.error('Error al traer los datos de fakestoreapi ->', error);
    //     }
    // };


// const textStyle = {
  //   whiteSpace: 'nowrap',
  //   overflow: 'hidden',
  //   textOverflow: 'ellipsis',
  // };



  "use client";
import {
    Input,
    Checkbox,
    Button,
    Typography,
    Select, Option
} from "@material-tailwind/react";
import { useForm } from "react-hook-form";
const FormulariosComponent = () => {

    const { register, handleSubmit, formState: { errors }, watch, reset, setValue } = useForm()

    const submit = handleSubmit((data) => {
        console.log(data);
        alert("Datos enviados")
        reset()
    })

    
    return (

        <form onSubmit={submit} className="mt-8 mb-2 w-80 max-w-screen-lg sm:w-96">
            <div className="flex flex-col gap-3">

                <Input
                    size="lg"
                    label="Nombres"
                    className=""
                    {...register("names", {
                        required: {
                            value: true,
                            message: "El nombre es requerido"
                        },
                        minLength: {
                            value: 4,
                            message: "El nombre debe contener al menos 4 caracteres"
                        },
                        maxLength: {
                            value: 100,
                            message: "EL campo debe tener maximo 100 caracteres"
                        }
                    })}
                />
                {errors.names && <span className="text-red-500 text-sm">{errors.names.message}</span>}
                {/* {errors.names?.type == "required" && <span className="text-red-500 text-sm">Name is required</span>}
                {errors.names?.type == "minLength" && <span className="text-red-500 text-sm">Name required al most 4 characters</span>} */}
                <Input
                    type="email"
                    size="lg"
                    label="Correo"
                    className=""
                    {...register("email", {
                        required: {
                            value: true,
                            message: "El campo es requerido"
                        },
                        pattern: {
                            value: /^(?=.{1,64}@.{1,255}$)(?=.{6,255}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com|org|net|edu|gov|mil|mx|co|us|info|biz)$/,
                            message: "Correo no valido"
                        }

                    })}
                // labelProps={{
                //     className: "before:content-none after:content-none",
                // }}
                />
                {errors.email && <span className="text-red-500 text-sm">{errors.email.message}</span>}
                <Input
                    type="password"
                    size="lg"
                    label="Password"
                    className=""
                    {...register("password", {
                        required: {
                            value: true,
                            message: "Campo requerido"
                        },
                        minLength: {
                            value: 6,
                            message: "La contraseña debe tener minimo 6 caracteres"
                        }
                    })}
                />
                {errors.password && <span className="text-red-500 text-sm">{errors.password.message}</span>}
                <Input
                    type="password"
                    size="lg"
                    label="Confirm Password"
                    className=""
                    {...register("passwordConfirm", {
                        required: {
                            value: true,
                            message: "Campo requerido"
                        },
                        validate: (value) => value == watch("password") || "Las contraseñas no coinciden"
                    })}
                />

                {errors.passwordConfirm && <span className="text-red-500 text-sm">{errors.passwordConfirm.message}</span>}
                <Input
                    type="date"
                    size="lg"
                    label="Fecha de Nacimiento"
                    className=""
                    {...register("date", {
                        required: {
                            value: true,
                            message: "Fecha requerida"
                        },
                        validate: (value) => {
                            const fechaNacimiento = new Date(value)
                            const fechaACtual = new Date()
                            const edad = fechaACtual.getFullYear() - fechaNacimiento.getFullYear()
                            return edad >= 18 || "Debes ser mayor de edad"
                        }
                    })}
                />
                {errors.date && <span className="text-red-500 text-sm">{errors.date.message}</span>}

                <select {...register("country", {
                    required: {
                        value: true,
                        message: "El país es requerido"
                    }
                })}>
                    <option value="mx">Mexico</option>
                    <option value="arg">Argentina</option>
                    <option value="usa">Estados Unidos</option>
                </select>
                {errors.country && <span className="text-red-500 text-sm">{errors.country.message}</span>}
                {
                    watch("country") == "mx" && (
                        <Input type="text" size="lg" label="Alcaldía"></Input>
                    )
                }
                <Input
                    type="file"
                    size="lg"
                    label="Foto"
                    className=""
                    {...register("foto")}
                />

            </div>
            <Checkbox
                label={
                    <Typography
                        variant="small"
                        color="gray"
                        className="flex items-center font-normal"
                    >
                        Acepto
                        <a
                            href="#"
                            className="font-medium transition-colors hover:text-gray-900"
                        >
                            &nbsp;Terminos y Condiciones
                        </a>
                    </Typography>
                }
                containerProps={{ className: "-ml-2.5" }}
            />
            <Button className="mt-6" type="submit" fullWidth>
                Enviar
            </Button>

            <pre>
                {JSON.stringify(watch(), null, 2)}
            </pre>

        </form>
       

    );
}
export default FormulariosComponent